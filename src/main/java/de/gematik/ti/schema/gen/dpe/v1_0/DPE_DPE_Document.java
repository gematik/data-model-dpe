//
//  This is a generated file, do not edit!
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.dpe.v1_0;

import de.gematik.ti.schema.gen.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class DPE_DPE_Document  {
    
    public static final String NAMESPACE = "DPE";
    
    // attributes:
    /*@isRequired*/
    public String DPE_Version;
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public DPE_Persoenliche_Erklaerungen Persoenliche_Erklaerungen;
    
    // default Constructor
    public DPE_DPE_Document() {
        
        this.DPE_Version = new String();
        
        this.Persoenliche_Erklaerungen = new DPE_Persoenliche_Erklaerungen();
        
    }
    
    // copy Constructor
    public DPE_DPE_Document(DPE_DPE_Document _DPE_DPE_Document) {
        
        this.DPE_Version = _DPE_DPE_Document.DPE_Version;
        
        this.Persoenliche_Erklaerungen = _DPE_DPE_Document.Persoenliche_Erklaerungen;
    }
    
    public static DPE_DPE_Document deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        //DPE_DPE_Document _DPE_DPE_Document = new DPE_DPE_Document();
        
        DPE_DPE_Document _DPE_DPE_Document = new DPE_DPE_Document();
        
        _DPE_DPE_Document.DPE_Version = element.getAttributeNode("DPE_Version") != null ? element.getAttributeNode("DPE_Version").getValue() : null;
        // _DPE_DPE_Document.DPE_Version = element.getAttribute("DPE_Version");
        
        String uriPersoenliche_Erklaerungen = element.lookupNamespaceURI(DPE_Persoenliche_Erklaerungen.NAMESPACE) != null ? element.lookupNamespaceURI(DPE_Persoenliche_Erklaerungen.NAMESPACE) : element.lookupNamespaceURI(null);
        NodeList nodeListPersoenliche_Erklaerungen = element.getElementsByTagNameNS(uriPersoenliche_Erklaerungen ,"Persoenliche_Erklaerungen");
        Node nodePersoenliche_Erklaerungen = nodeListPersoenliche_Erklaerungen.item(0);
        _DPE_DPE_Document.Persoenliche_Erklaerungen = DPE_Persoenliche_Erklaerungen.deserialize(nodePersoenliche_Erklaerungen);
        
        return _DPE_DPE_Document;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<DPE_DPE_Document>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        attributesDict.put("DPE_Version", this.DPE_Version);
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("Persoenliche_Erklaerungen", this.Persoenliche_Erklaerungen);
        
        return elemArray;
    }
}

