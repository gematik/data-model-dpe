//
//  This is a generated file, do not edit!
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.dpe.v1_0;

import de.gematik.ti.schema.gen.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class DPE_DPE_Versicherter_Einwilligung  {
    
    public static final String NAMESPACE = "DPE";
    
    // attributes:
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public String DPE_VE_Arzt_Nachname;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String DPE_VE_Arzt_Vorname;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public DPE_DPE_AdresseType DPE_VE_Ablageort;
    
    // default Constructor
    public DPE_DPE_Versicherter_Einwilligung() {
        
        this.DPE_VE_Arzt_Nachname = new String();
        
        this.DPE_VE_Arzt_Vorname = new String();
        
        this.DPE_VE_Ablageort = new DPE_DPE_AdresseType();
        
    }
    
    // copy Constructor
    public DPE_DPE_Versicherter_Einwilligung(DPE_DPE_Versicherter_Einwilligung _DPE_DPE_Versicherter_Einwilligung) {
        
        this.DPE_VE_Arzt_Nachname = _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Arzt_Nachname;
        this.DPE_VE_Arzt_Vorname = _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Arzt_Vorname;
        this.DPE_VE_Ablageort = _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Ablageort;
    }
    
    public static DPE_DPE_Versicherter_Einwilligung deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        //DPE_DPE_Versicherter_Einwilligung _DPE_DPE_Versicherter_Einwilligung = new DPE_DPE_Versicherter_Einwilligung();
        
        DPE_DPE_Versicherter_Einwilligung _DPE_DPE_Versicherter_Einwilligung = new DPE_DPE_Versicherter_Einwilligung();
        
        String uriDPE_VE_Arzt_Nachname = element.lookupNamespaceURI(DPE_DPE_Versicherter_Einwilligung.NAMESPACE) != null ? element.lookupNamespaceURI(DPE_DPE_Versicherter_Einwilligung.NAMESPACE) : element.lookupNamespaceURI(null);
        NodeList nodeListDPE_VE_Arzt_Nachname = element.getElementsByTagNameNS(uriDPE_VE_Arzt_Nachname ,"DPE_VE_Arzt_Nachname");
        // element is optional, so check for existence
        
        if (nodeListDPE_VE_Arzt_Nachname.getLength() == 0) {
            _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Arzt_Nachname = null;
        } else {
            _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Arzt_Nachname = String.valueOf(((Element) nodeListDPE_VE_Arzt_Nachname.item(0)).getTextContent());
        }
        
        String uriDPE_VE_Arzt_Vorname = element.lookupNamespaceURI(DPE_DPE_Versicherter_Einwilligung.NAMESPACE) != null ? element.lookupNamespaceURI(DPE_DPE_Versicherter_Einwilligung.NAMESPACE) : element.lookupNamespaceURI(null);
        NodeList nodeListDPE_VE_Arzt_Vorname = element.getElementsByTagNameNS(uriDPE_VE_Arzt_Vorname ,"DPE_VE_Arzt_Vorname");
        // element is optional, so check for existence
        
        if (nodeListDPE_VE_Arzt_Vorname.getLength() == 0) {
            _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Arzt_Vorname = null;
        } else {
            _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Arzt_Vorname = String.valueOf(((Element) nodeListDPE_VE_Arzt_Vorname.item(0)).getTextContent());
        }
        
        String uriDPE_VE_Ablageort = element.lookupNamespaceURI(DPE_DPE_AdresseType.NAMESPACE) != null ? element.lookupNamespaceURI(DPE_DPE_AdresseType.NAMESPACE) : element.lookupNamespaceURI(null);
        NodeList nodeListDPE_VE_Ablageort = element.getElementsByTagNameNS(uriDPE_VE_Ablageort ,"DPE_VE_Ablageort");
        Node nodeDPE_VE_Ablageort = nodeListDPE_VE_Ablageort.item(0);
        _DPE_DPE_Versicherter_Einwilligung.DPE_VE_Ablageort = DPE_DPE_AdresseType.deserialize(nodeDPE_VE_Ablageort);
        
        return _DPE_DPE_Versicherter_Einwilligung;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<DPE_DPE_Versicherter_Einwilligung>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("DPE_VE_Arzt_Nachname", this.DPE_VE_Arzt_Nachname);
        elemArray.put("DPE_VE_Arzt_Vorname", this.DPE_VE_Arzt_Vorname);
        elemArray.put("DPE_VE_Ablageort", this.DPE_VE_Ablageort);
        
        return elemArray;
    }
}

