/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.dpe.v1_1;

import de.gematik.ti.schema.gen.dpe.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class NFDM_Adresse  {
    
    public static final String NAMESPACE_PREFIX = "NFDM";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/nfds/common/NFDM_Common/v1.1";
    
    // attributes:
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Postleitzahl;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Ort;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Strasse;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Hausnummer;
    
    /*@isSingleAndOptionalValue*/
    
    public String Anschriftenzusatz;
    
    /*@isSingleAndOptionalValue*/
    
    public String Wohnsitzlaendercode;
    
    // default Constructor
    public NFDM_Adresse() {
        
        this.Postleitzahl = new String();
        
        this.Ort = new String();
        
        this.Strasse = new String();
        
        this.Hausnummer = new String();
        
        this.Anschriftenzusatz = null;
        
        this.Wohnsitzlaendercode = null;
        
    }
    
    // copy Constructor
    public NFDM_Adresse(NFDM_Adresse _NFDM_Adresse) {
        
        this.Postleitzahl = _NFDM_Adresse.Postleitzahl;
        this.Ort = _NFDM_Adresse.Ort;
        this.Strasse = _NFDM_Adresse.Strasse;
        this.Hausnummer = _NFDM_Adresse.Hausnummer;
        this.Anschriftenzusatz = _NFDM_Adresse.Anschriftenzusatz;
        this.Wohnsitzlaendercode = _NFDM_Adresse.Wohnsitzlaendercode;
    }
    
    public static NFDM_Adresse deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        NFDM_Adresse _NFDM_Adresse = new NFDM_Adresse();
        
        NodeList nodeListPostleitzahl = element.getElementsByTagNameNS(NFDM_Adresse.NAMESPACE_URI ,"Postleitzahl");
        
        if (nodeListPostleitzahl.getLength() == 0) {
            _NFDM_Adresse.Postleitzahl = null;
        } else {
            _NFDM_Adresse.Postleitzahl = String.valueOf(((Element) nodeListPostleitzahl.item(0)).getTextContent());
        }
        
        NodeList nodeListOrt = element.getElementsByTagNameNS(NFDM_Adresse.NAMESPACE_URI ,"Ort");
        
        if (nodeListOrt.getLength() == 0) {
            _NFDM_Adresse.Ort = null;
        } else {
            _NFDM_Adresse.Ort = String.valueOf(((Element) nodeListOrt.item(0)).getTextContent());
        }
        
        NodeList nodeListStrasse = element.getElementsByTagNameNS(NFDM_Adresse.NAMESPACE_URI ,"Strasse");
        
        if (nodeListStrasse.getLength() == 0) {
            _NFDM_Adresse.Strasse = null;
        } else {
            _NFDM_Adresse.Strasse = String.valueOf(((Element) nodeListStrasse.item(0)).getTextContent());
        }
        
        NodeList nodeListHausnummer = element.getElementsByTagNameNS(NFDM_Adresse.NAMESPACE_URI ,"Hausnummer");
        
        if (nodeListHausnummer.getLength() == 0) {
            _NFDM_Adresse.Hausnummer = null;
        } else {
            _NFDM_Adresse.Hausnummer = String.valueOf(((Element) nodeListHausnummer.item(0)).getTextContent());
        }
        
        NodeList nodeListAnschriftenzusatz = element.getElementsByTagNameNS(NFDM_Adresse.NAMESPACE_URI ,"Anschriftenzusatz");
        
        if (nodeListAnschriftenzusatz.getLength() == 0) {
            _NFDM_Adresse.Anschriftenzusatz = null;
        } else {
            _NFDM_Adresse.Anschriftenzusatz = String.valueOf(((Element) nodeListAnschriftenzusatz.item(0)).getTextContent());
        }
        
        NodeList nodeListWohnsitzlaendercode = element.getElementsByTagNameNS(NFDM_Adresse.NAMESPACE_URI ,"Wohnsitzlaendercode");
        
        if (nodeListWohnsitzlaendercode.getLength() == 0) {
            _NFDM_Adresse.Wohnsitzlaendercode = null;
        } else {
            _NFDM_Adresse.Wohnsitzlaendercode = String.valueOf(((Element) nodeListWohnsitzlaendercode.item(0)).getTextContent());
        }
        
        return _NFDM_Adresse;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<NFDM_Adresse>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("Postleitzahl", this.Postleitzahl);
        elemArray.put("Ort", this.Ort);
        elemArray.put("Strasse", this.Strasse);
        elemArray.put("Hausnummer", this.Hausnummer);
        elemArray.put("Anschriftenzusatz", this.Anschriftenzusatz);
        elemArray.put("Wohnsitzlaendercode", this.Wohnsitzlaendercode);
        
        return elemArray;
    }
}

