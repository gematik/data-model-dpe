/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.dpe.v1_1;

import de.gematik.ti.schema.gen.dpe.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class NFDM_Versicherter  {
    
    public static final String NAMESPACE_PREFIX = "NFDM";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/nfds/common/NFDM_Common/v1.1";
    
    // attributes:
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Versicherten_ID;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Geburtsdatum;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Vorname;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Nachname;
    
    /*@isSingleAndOptionalValue*/
    
    public String Vorsatzwort;
    
    /*@isSingleAndOptionalValue*/
    
    public String Namenszusatz;
    
    /*@isSingleAndOptionalValue*/
    
    public String Titel;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Geschlecht;
    
    // default Constructor
    public NFDM_Versicherter() {
        
        this.Versicherten_ID = new String();
        
        this.Geburtsdatum = new String();
        
        this.Vorname = new String();
        
        this.Nachname = new String();
        
        this.Vorsatzwort = null;
        
        this.Namenszusatz = null;
        
        this.Titel = null;
        
        this.Geschlecht = new String();
        
    }
    
    // copy Constructor
    public NFDM_Versicherter(NFDM_Versicherter _NFDM_Versicherter) {
        
        this.Versicherten_ID = _NFDM_Versicherter.Versicherten_ID;
        this.Geburtsdatum = _NFDM_Versicherter.Geburtsdatum;
        this.Vorname = _NFDM_Versicherter.Vorname;
        this.Nachname = _NFDM_Versicherter.Nachname;
        this.Vorsatzwort = _NFDM_Versicherter.Vorsatzwort;
        this.Namenszusatz = _NFDM_Versicherter.Namenszusatz;
        this.Titel = _NFDM_Versicherter.Titel;
        this.Geschlecht = _NFDM_Versicherter.Geschlecht;
    }
    
    public static NFDM_Versicherter deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        NFDM_Versicherter _NFDM_Versicherter = new NFDM_Versicherter();
        
        NodeList nodeListVersicherten_ID = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Versicherten_ID");
        
        if (nodeListVersicherten_ID.getLength() == 0) {
            _NFDM_Versicherter.Versicherten_ID = null;
        } else {
            _NFDM_Versicherter.Versicherten_ID = String.valueOf(((Element) nodeListVersicherten_ID.item(0)).getTextContent());
        }
        
        NodeList nodeListGeburtsdatum = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Geburtsdatum");
        
        if (nodeListGeburtsdatum.getLength() == 0) {
            _NFDM_Versicherter.Geburtsdatum = null;
        } else {
            _NFDM_Versicherter.Geburtsdatum = String.valueOf(((Element) nodeListGeburtsdatum.item(0)).getTextContent());
        }
        
        NodeList nodeListVorname = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Vorname");
        
        if (nodeListVorname.getLength() == 0) {
            _NFDM_Versicherter.Vorname = null;
        } else {
            _NFDM_Versicherter.Vorname = String.valueOf(((Element) nodeListVorname.item(0)).getTextContent());
        }
        
        NodeList nodeListNachname = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Nachname");
        
        if (nodeListNachname.getLength() == 0) {
            _NFDM_Versicherter.Nachname = null;
        } else {
            _NFDM_Versicherter.Nachname = String.valueOf(((Element) nodeListNachname.item(0)).getTextContent());
        }
        
        NodeList nodeListVorsatzwort = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Vorsatzwort");
        
        if (nodeListVorsatzwort.getLength() == 0) {
            _NFDM_Versicherter.Vorsatzwort = null;
        } else {
            _NFDM_Versicherter.Vorsatzwort = String.valueOf(((Element) nodeListVorsatzwort.item(0)).getTextContent());
        }
        
        NodeList nodeListNamenszusatz = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Namenszusatz");
        
        if (nodeListNamenszusatz.getLength() == 0) {
            _NFDM_Versicherter.Namenszusatz = null;
        } else {
            _NFDM_Versicherter.Namenszusatz = String.valueOf(((Element) nodeListNamenszusatz.item(0)).getTextContent());
        }
        
        NodeList nodeListTitel = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Titel");
        
        if (nodeListTitel.getLength() == 0) {
            _NFDM_Versicherter.Titel = null;
        } else {
            _NFDM_Versicherter.Titel = String.valueOf(((Element) nodeListTitel.item(0)).getTextContent());
        }
        
        NodeList nodeListGeschlecht = element.getElementsByTagNameNS(NFDM_Versicherter.NAMESPACE_URI ,"Geschlecht");
        
        if (nodeListGeschlecht.getLength() == 0) {
            _NFDM_Versicherter.Geschlecht = null;
        } else {
            _NFDM_Versicherter.Geschlecht = String.valueOf(((Element) nodeListGeschlecht.item(0)).getTextContent());
        }
        
        return _NFDM_Versicherter;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<NFDM_Versicherter>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("Versicherten_ID", this.Versicherten_ID);
        elemArray.put("Geburtsdatum", this.Geburtsdatum);
        elemArray.put("Vorname", this.Vorname);
        elemArray.put("Nachname", this.Nachname);
        elemArray.put("Vorsatzwort", this.Vorsatzwort);
        elemArray.put("Namenszusatz", this.Namenszusatz);
        elemArray.put("Titel", this.Titel);
        elemArray.put("Geschlecht", this.Geschlecht);
        
        return elemArray;
    }
}

